---
---

<div class="calculator-container">
  <form id="loan-form">
    <div class="form-grid">
      <div class="form-group">
        <label for="amount">Importe del préstamo ($)</label>
        <input type="number" id="amount" name="amount" value="150000" required />
      </div>

      <div class="form-group regular-payment-field">
        <label for="duration">Duración</label>
        <input type="number" id="duration" name="duration" value="5" required />
      </div>

      <div class="form-group regular-payment-field">
        <label for="duration-unit">Unidad</label>
        <select id="duration-unit" name="duration-unit">
          <option value="years">Años</option>
          <option value="months">Meses</option>
          <option value="weeks">Semanas</option>
          <option value="days">Días</option>
        </select>
      </div>

      <div class="form-group">
        <label for="interest" id="interest-label">Interés Nominal Anual (%)</label>
        <input type="number" id="interest" name="interest" step="0.01" value="3" required />
      </div>

      <div class="form-group">
        <label>Aporte / RS / JZ (%)</label>
        <p class="static-value">5</p>
      </div>

      <div class="form-group regular-payment-field">
        <label for="payment-period">Periodo de Pago</label>
        <select id="payment-period" name="payment-period">
          <option value="365">Diario</option>
          <option value="12">Mensual</option>
          <option value="4">Trimestral</option>
          <option value="2" selected>Semestral</option>
          <option value="1">Anual</option>
        </select>
      </div>

      <div class="form-group">
        <label for="amortization-type">Tipo de Amortización</label>
        <select id="amortization-type" name="amortization-type">
          <option value="french">Francés</option>
          <option value="german">Alemán</option>
          <option value="american">Americano</option>
          <option value="single">Pago Único</option>
        </select>
      </div>

      <div class="form-group regular-payment-field">
        <label for="grace-period-duration">Tiempo de Gracia</label>
        <input type="number" id="grace-period-duration" name="grace-period-duration" value="2" />
      </div>

      <div class="form-group regular-payment-field">
        <label for="grace-period-unit">Unidad (Gracia)</label>
        <select id="grace-period-unit" name="grace-period-unit">
          <option value="months">Meses</option>
          <option value="years">Años</option>
          <option value="weeks">Semanas</option>
          <option value="days">Días</option>
        </select>
      </div>

      <div class="form-group regular-payment-field">
        <label for="dead-period-duration">Tiempo Muerto</label>
        <input type="number" id="dead-period-duration" name="dead-period-duration" value="1" />
      </div>

      <div class="form-group regular-payment-field">
        <label for="dead-period-unit">Unidad (T. Muerto)</label>
        <select id="dead-period-unit" name="dead-period-unit">
          <option value="years">Años</option>
          <option value="months">Meses</option>
          <option value="weeks">Semanas</option>
          <option value="days">Días</option>
        </select>
      </div>

      <div class="form-group">
        <label for="grant-date">Fecha de Otorgamiento</label>
        <input type="date" id="grant-date" name="grant-date" required />
      </div>

      <div id="single-payment-fields" style="display: none;">
        <div class="form-group">
          <label for="single-payment-duration">Período de Pago Único</label>
          <input type="number" id="single-payment-duration" name="single-payment-duration" value="100" />
        </div>
        <div class="form-group">
          <label for="single-payment-unit">Unidad</label>
          <select id="single-payment-unit" name="single-payment-unit">
            <option value="days">Días</option>
            <option value="months">Meses</option>
            <option value="years">Años</option>
          </select>
        </div>
      </div>
    </div>

    <div class="form-actions">
        <button type="submit">Calcular</button>
        <button type="button" id="download-excel" disabled>Descargar Excel</button>
    </div>
  </form>

  <div class="note-container">
    <p><strong>Nota:</strong> El aporte corresponde al 3% de Responsabilidad Social y 2% a Juventud Zamorana.</p>
  </div>

  <div id="results" class="results-container">
    <h2>Tabla de Amortización</h2>
    <div id="table-container">
        <!-- La tabla se generará aquí -->
        <p>Introduce los datos y haz clic en "Calcular" para ver la tabla de amortización.</p>
    </div>
    <div id="summary" class="summary-container"></div>
  </div>
</div>

<style>
  #single-payment-fields {
    display: contents; /* Allows grid layout to apply to children */
  }
  :root {
    --primary-color: #005ce6;
    --secondary-color: #f0f6ff;
    --text-color: #333;
    --border-color: #d1d5db;
    --background-color: #fff;
    --card-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .calculator-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background-color: var(--background-color);
    border-radius: 8px;
    box-shadow: var(--card-shadow);
  }

  h2 {
    color: var(--primary-color);
    border-bottom: 2px solid var(--secondary-color);
    padding-bottom: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group label {
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-color);
  }

  .form-group input,
  .form-group select {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .form-group .static-value {
    padding: 0.75rem;
    font-size: 1rem;
    background-color: #f9fafb;
    border-radius: 6px;
    margin: 0;
    border: 1px solid var(--border-color);
  }

  .form-group input:focus,
  .form-group select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(0, 92, 230, 0.1);
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s, transform 0.1s;
  }

  button[type="submit"] {
    background-color: var(--primary-color);
    color: white;
  }

  button[type="submit"]:hover {
    background-color: #004ab3;
  }
    
  button:active {
      transform: scale(0.98);
  }

  button#download-excel {
    background-color: #1d7f3f;
    color: white;
  }
    
  button#download-excel:hover {
    background-color: #176331;
  }

  button:disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
  }

  .note-container {
    margin: 1.5rem 0;
    padding: 1rem;
    background-color: var(--secondary-color);
    border-radius: 8px;
    font-size: 0.9rem;
    color: var(--text-color);
  }
  .note-container p {
    margin: 0;
  }

  .results-container {
      margin-top: 2rem;
  }
  
  #table-container {
    overflow-x: auto;
    max-height: 500px;
    overflow-y: auto;
    margin-top: 1rem;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
  }

  th, td {
    padding: 0.75rem;
    text-align: right;
    border-bottom: 1px solid var(--border-color);
  }

  th {
    background-color: var(--secondary-color);
    font-weight: 600;
    position: sticky;
    top: 0;
  }

  tr:nth-child(even) {
    background-color: #f9fafb;
  }

  td:first-child, th:first-child {
      text-align: center;
  }

  .summary-container {
      margin-top: 1.5rem;
      padding: 1.5rem;
      background-color: var(--secondary-color);
      border-radius: 8px;
  }
</style>

<script>
    // @ts-nocheck
    import { calculateAmortization } from '../logic/amortization.js';
    import * as XLSX from 'xlsx';

    document.addEventListener('DOMContentLoaded', () => {
        const grantDateInput = document.getElementById('grant-date');
        if (grantDateInput) {
            grantDateInput.value = new Date().toISOString().split('T')[0];
        }

        const form = document.getElementById('loan-form');
        const tableContainer = document.getElementById('table-container');
        const summaryContainer = document.getElementById('summary');
        const downloadButton = document.getElementById('download-excel');
        const amortizationTypeSelect = document.getElementById('amortization-type');
        const singlePaymentFields = document.getElementById('single-payment-fields');
        const regularPaymentFields = form.querySelectorAll('.regular-payment-field');
        const interestLabel = document.getElementById('interest-label');

        let amortizationTableData = [];

        const currencyFormatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
        });

        function toggleFields() {
            const isSinglePayment = amortizationTypeSelect.value === 'single';
            // Use 'display: contents' to make the wrapper div transparent to the grid layout
            singlePaymentFields.style.display = isSinglePayment ? 'contents' : 'none';
            regularPaymentFields.forEach(field => {
                field.style.display = isSinglePayment ? 'none' : 'flex';
            });

            if (isSinglePayment) {
                interestLabel.textContent = 'Interés Fijo (%)';
            } else {
                interestLabel.textContent = 'Interés Nominal Anual (%)';
            }
        }

        amortizationTypeSelect.addEventListener('change', toggleFields);
        toggleFields(); // Initial check

        function convertToDays(duration, unit) {
            if (!duration) return 0;
            switch (unit) {
                case 'days': return duration;
                case 'weeks': return duration * 7;
                case 'months': return duration * 30.44; // Average days in a month
                case 'years': return duration * 365.25; // Account for leap years
                default: return 0;
            }
        }

        function getOptionsFromForm() {
            const formData = new FormData(form);
            const amortizationType = formData.get('amortization-type');
            const options = {
                amount: parseFloat(formData.get('amount')),
                interest: parseFloat(formData.get('interest')),
                openingFee: 5, // Hardcoded value
                amortizationType: amortizationType,
                grantDate: formData.get('grant-date'),
            };

            if (amortizationType === 'single') {
                const grantDate = new Date(options.grantDate);
                const singlePaymentDuration = parseInt(formData.get('single-payment-duration'));
                const singlePaymentUnit = formData.get('single-payment-unit');

                const finalDate = new Date(grantDate);
                // Adjust for timezone issues by working with UTC dates
                finalDate.setUTCDate(grantDate.getUTCDate());

                switch (singlePaymentUnit) {
                    case 'days':
                        finalDate.setUTCDate(grantDate.getUTCDate() + singlePaymentDuration);
                        break;
                    case 'months':
                        finalDate.setUTCMonth(grantDate.getUTCMonth() + singlePaymentDuration);
                        break;
                    case 'years':
                        finalDate.setUTCFullYear(grantDate.getUTCFullYear() + singlePaymentDuration);
                        break;
                }

                options.singlePaymentDate = finalDate.toISOString().split('T')[0];
            } else {
                options.duration = parseFloat(formData.get('duration'));
                options.durationUnit = formData.get('duration-unit');
                options.paymentPeriod = parseInt(formData.get('payment-period'));
                options.gracePeriodDuration = parseInt(formData.get('grace-period-duration') || 0);
                options.gracePeriodUnit = formData.get('grace-period-unit');
                options.deadPeriodDuration = parseInt(formData.get('dead-period-duration') || 0);
                options.deadPeriodUnit = formData.get('dead-period-unit');
            }
            return options;
        }

        downloadButton.addEventListener('click', () => {
            if (amortizationTableData.length === 0) {
                alert('Primero debes calcular la tabla de amortización.');
                return;
            }

            const options = getOptionsFromForm();
            const durationUnitSelect = form.querySelector('#duration-unit');
            const selectedUnitText = durationUnitSelect.options[durationUnitSelect.selectedIndex].text;

            const totalInterest = amortizationTableData.reduce((acc, row) => acc + row.interest, 0);
            const totalPaid = amortizationTableData.reduce((acc, row) => acc + row.payment, 0);
            
            const summary = [
                ["Resumen del Préstamo"],
                ["Importe Préstamo", options.amount],
                ["Duración", `${options.duration} ${selectedUnitText}`],
                ["Interés Nominal", `${options.interest}%`],
                ["Aporte / RS / JZ", `${options.openingFee}%`],
                ["Total Intereses", totalInterest],
                ["Coste Total Préstamo", totalPaid],
                [] // Empty row for spacing
            ];

            const header = ["Periodo", "Fecha de Pago", "Cuota", "Intereses", "Amortización", "Capital Pendiente"];
            const body = amortizationTableData.map(row => [
                row.period,
                new Date(row.paymentDate).toLocaleDateString(),
                row.payment,
                row.interest,
                row.principal,
                row.remaining
            ]);

            const ws = XLSX.utils.aoa_to_sheet([summary[0], ...summary.slice(1), header, ...body]);
            
            ws['!cols'] = [ {wch:10}, {wch:15}, {wch:15}, {wch:15}, {wch:15}, {wch:20} ];
            
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Amortización");
            
            XLSX.writeFile(wb, "tabla_amortizacion.xlsx");
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const options = getOptionsFromForm();

            if (options.amortizationType !== 'single') {
                const totalLoanDays = convertToDays(options.duration, options.durationUnit);
                const gracePeriodDays = convertToDays(options.gracePeriodDuration, options.gracePeriodUnit);
                const deadPeriodDays = convertToDays(options.deadPeriodDuration, options.deadPeriodUnit);

                if (gracePeriodDays + deadPeriodDays > totalLoanDays) {
                    alert('La suma del tiempo de gracia y el tiempo muerto no puede ser mayor que la duración total del préstamo.');
                    return;
                }
            }

            amortizationTableData = calculateAmortization(options);
            renderTable(amortizationTableData);
            renderSummary(options, amortizationTableData);
            downloadButton.disabled = false;
        });

        function renderTable(data) {
            if (!data || data.length === 0) {
                tableContainer.innerHTML = '<p>No se pudo generar la tabla. Revisa los datos o la implementación del método de amortización.</p>';
                return;
            }

            const table = document.createElement('table');
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Periodo</th>
                        <th>Fecha de Pago</th>
                        <th>Cuota</th>
                        <th>Intereses</th>
                        <th>Amortización</th>
                        <th>Capital Pendiente</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.map(row => `
                        <tr>
                            <td style="text-align: center;">${row.period}</td>
                            <td>${new Date(row.paymentDate).toLocaleDateString()}</td>
                            <td>${currencyFormatter.format(row.payment)}</td>
                            <td>${currencyFormatter.format(row.interest)}</td>
                            <td>${currencyFormatter.format(row.principal)}</td>
                            <td>${currencyFormatter.format(row.remaining)}</td>
                        </tr>
                    `).join('')}
                </tbody>
            `;
            tableContainer.innerHTML = '';
            tableContainer.appendChild(table);
        }
        
        function renderSummary(options, data) {
            const totalInterest = data.reduce((acc, row) => acc + row.interest, 0);
            const totalPaid = data.reduce((acc, row) => acc + row.payment, 0);
            const openingFeeAmount = options.amount * (options.openingFee / 100);

            summaryContainer.innerHTML = `
                <h3>Resumen del Préstamo</h3>
                <p><strong>Total de Intereses Pagados:</strong> ${currencyFormatter.format(totalInterest)}</p>
                <p><strong>Aporte / RS / JZ:</strong> ${currencyFormatter.format(openingFeeAmount)} (${options.openingFee}%)</p>
                <p><strong>Coste Total del Préstamo (Capital + Intereses + Aportes):</strong> ${currencyFormatter.format(totalPaid)}</p>
            `;
        }
    });

</script>